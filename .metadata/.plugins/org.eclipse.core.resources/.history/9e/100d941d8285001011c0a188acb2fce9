/*
Given an Integer array, Reverse the array in place[not using extra array]
*/
/*
Approach - 1
Two pointers left and right
Swapping first and last elements and updating left and right
Time complexity is O(n/2) => O(n)
Space complexity is O(1)
*/

//package Arrays.Day1;
//
//public class RevereseArray {
//	public static void main(String args[]) {
//		int[] arr= {1,2,3,4,5};
//		int[] res = reverseArray(arr);
//		for(int i:res) {
//			System.out.print(i+" ");
//		}
//	}
//	static int[] reverseArray(int[] arr) {
//		int left=0;
//		int right=arr.length-1;
//		while(left<right) {
//			int temp=arr[left];
//			arr[left]=arr[right];
//			arr[right]=temp;
//			left++;
//			right--;
//		}
//		return arr;
//	}
//}


/*
Approach - 2
Swapping with temp Variable
Time complexity is O(n/2) => O(n)
Space complexity is O(1)
*/

//package Arrays.Day1;
//
//public class RevereseArray {
//	public static void main(String args[]) {
//		int[] arr= {1,2,3,4,5};
//		int[] res = reverseArray(arr);
//		for(int i:res) {
//			System.out.print(i+" ");
//		}
//	}
//	static int[] reverseArray(int[] arr) {
//		int n=arr.length;
//		for(int i=0;i<n/2;i++) {
//			int temp=arr[i];
//			arr[i]=arr[n-i-1];
//			arr[n-i-1]=temp;
//		}
//		return arr;
//	}
//}

/*
Approach - 3
Using built-in function
Time complexity is O(n)
Space complexity is O(1)
*/

package Arrays.Day1;
import java.util.Arrays;
import java.util.Collections;
public class RevereseArray {
	public static void main(String args[]) {
		int[] arr= {1,2,3,4,5};
		int[] res = reverseArray(arr);
		for(int i:res) {
			System.out.print(i+" ");
		}
	}
	static int[] reverseArray(int[] arr) {
		Collections.reverse(Arrays.asList(arr));   
		return arr;
	}
}
