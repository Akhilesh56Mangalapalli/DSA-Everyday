/*
Given an array, shift all the zero elements to the end 
with out effecting the order of the non zero elements
in place [don't use extra array]
*/


/*
Approach -1 
Copying  non zero elements to its preceeding zero elements position
Two loops 1 -> copying non zeros
          2 -> assigning remaining with zeros

Time Complexity is Worst case O(2n) ==> O(n)
Space Complexity is O(1)
*/

//package Arrays.Day1;
//
//public class ShiftZerosToEnd {
//	public static void main(String[] args) {
//		int[] arr= {1,5,0,3,0,7,0,6,7,0};
//		int[] res=shiftzerostoend(arr);
//		for(int i:res) {
//			System.out.print(i+" ");
//		}
//	}
//	static int[] shiftzerostoend(int[] arr) {
//		int n=arr.length;
//		int count=0;
//		for(int i=0;i<n;i++) {
//			if(arr[i]!=0) {
//				arr[count]=arr[i];
//				count++;
//			}
//		}
//		while(count<n) {
//			arr[count]=0;
//			count++;
//		}
//		return arr;
//	}
//}


/*
Approach - 2 
Swapping  non zero elements to its preceeding zero elements position
One loops -> swapping non zeros

Time Complexity is O(n)
Space Complexity is O(1)
*/

package Arrays.Day1;

public class ShiftZerosToEnd {
	public static void main(String[] args) {
		int[] arr= {1,5,0,3,0,7,0,6,7,0};
		int[] res=shiftzerostoend(arr);
		for(int i:res) {
			System.out.print(i+" ");
		}
	}
	static int[] shiftzerostoend(int[] arr) {
		int n=arr.length;
		int count=0;
		for(int i=0;i<n;i++) {
			if(arr[i]!=0) {
				swap(i,count,arr);
				count++;
			}
		}
		return arr;
	}
	static void swap(int a,int b,int[] arr) {
		int temp=arr[i];
		arr[i]=arr[count];
		arr[count]=temp;
	}
}